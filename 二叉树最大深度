package com.example.demo;

import javax.swing.tree.TreeNode;
import java.util.LinkedList;
import java.util.Queue;

/**
 * @author lingnill
 */
//给定二叉树[3，9，null，null，15，7]；返回他的最大深度3。
//dfs
public class Tree {
    int maxLevel = 0;
    public int maxDepth1(TreeNode root){
        if (root==null){
            return 0;
        }
        dfs(root,1);
        return maxLevel;
    }
    public void dfs(TreeNode root,int level){
        if (root==null) {
            return;
        }
        if (level>maxLevel){
            maxLevel=level;

        }
        dfs(root.left,level+1);
        dfs(root.right,level+1);
    }
    //递归
    public int maxDepth2(TreeNode root){
        if (root==null){
            return 0;
        }
        int left=maxDepth2(root.left);
        int right=maxDepth2(root.right);
        return Math.max(left,right)+1;
    }
    //bfs
    public int maxDepth3(TreeNode root){
        if (root==null){
            return 0;
        }
        int level = 0;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        while (!queue.isEmpty()){
            int size = queue.size();
            level++;
            for (int i = 0;i<size;i++){
                TreeNode node = queue.remove();
                if (root.left!=null){
                    queue.add(node.left);
                }
                if (root.right!=null){
                    queue.add(node.right);
                }
            }
        }
        return level;
    }
}
